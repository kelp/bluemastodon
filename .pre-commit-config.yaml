repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-ast
      - id: check-json
      - id: check-merge-conflict
      - id: debug-statements
      - id: detect-private-key

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: isort (python)
        args: ["--profile", "black"]

  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        language_version: python3

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        additional_dependencies: [flake8-docstrings]
        exclude: ^(tests/|setup.py)
        args: ["--config=.flake8"]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-requests, pydantic]
        args: ["--ignore-missing-imports"]
        exclude: ^(tests/|setup.py)

  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.7
    hooks:
      - id: bandit
        args: ["-c", "pyproject.toml"]
        additional_dependencies: ["bandit[toml]"]
        exclude: ^(tests/|setup.py)

  # Run pytest (with minimum coverage requirement)
  - repo: local
    hooks:
      - id: pytest
        name: pytest
        entry: poetry run pytest --cov=src --cov-report=term-missing --cov-fail-under=95
        language: system
        pass_filenames: false
        always_run: true
        verbose: true

      - id: check-coverage-min
        name: Check minimum coverage
        entry: |
          bash -c '
            poetry run pytest --cov=src --cov-report=xml --quiet
            COV=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse(\"coverage.xml\"); root = tree.getroot(); print(float(root.attrib[\"line-rate\"]) * 100)")
            if (( $(echo "$COV < 95" | bc -l) )); then
              echo "Coverage is $COV%, which is below the minimum required 95%"
              exit 1
            else
              echo "Coverage is $COV%, which meets the minimum required 95%"
            fi
          '
        language: system
        pass_filenames: false
        always_run: true
        verbose: true

ci:
  autofix_commit_msg: "style: auto fixes from pre-commit hooks"
  autoupdate_commit_msg: "chore: update pre-commit hooks"